// Generated by gencpp from file sense_glove_test/glove.msg
// DO NOT EDIT!


#ifndef SENSE_GLOVE_TEST_MESSAGE_GLOVE_H
#define SENSE_GLOVE_TEST_MESSAGE_GLOVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sense_glove_test
{
template <class ContainerAllocator>
struct glove_
{
  typedef glove_<ContainerAllocator> Type;

  glove_()
    : finger(0)
    , vibration_amplitude(0)
    , vibration_duration(0)  {
    }
  glove_(const ContainerAllocator& _alloc)
    : finger(0)
    , vibration_amplitude(0)
    , vibration_duration(0)  {
  (void)_alloc;
    }



   typedef uint8_t _finger_type;
  _finger_type finger;

   typedef uint8_t _vibration_amplitude_type;
  _vibration_amplitude_type vibration_amplitude;

   typedef uint8_t _vibration_duration_type;
  _vibration_duration_type vibration_duration;





  typedef boost::shared_ptr< ::sense_glove_test::glove_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sense_glove_test::glove_<ContainerAllocator> const> ConstPtr;

}; // struct glove_

typedef ::sense_glove_test::glove_<std::allocator<void> > glove;

typedef boost::shared_ptr< ::sense_glove_test::glove > glovePtr;
typedef boost::shared_ptr< ::sense_glove_test::glove const> gloveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sense_glove_test::glove_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sense_glove_test::glove_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sense_glove_test::glove_<ContainerAllocator1> & lhs, const ::sense_glove_test::glove_<ContainerAllocator2> & rhs)
{
  return lhs.finger == rhs.finger &&
    lhs.vibration_amplitude == rhs.vibration_amplitude &&
    lhs.vibration_duration == rhs.vibration_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sense_glove_test::glove_<ContainerAllocator1> & lhs, const ::sense_glove_test::glove_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sense_glove_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sense_glove_test::glove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sense_glove_test::glove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sense_glove_test::glove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sense_glove_test::glove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sense_glove_test::glove_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sense_glove_test::glove_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sense_glove_test::glove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebb0cd83724acf33d4c91ba9d3bf438e";
  }

  static const char* value(const ::sense_glove_test::glove_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebb0cd83724acf33ULL;
  static const uint64_t static_value2 = 0xd4c91ba9d3bf438eULL;
};

template<class ContainerAllocator>
struct DataType< ::sense_glove_test::glove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sense_glove_test/glove";
  }

  static const char* value(const ::sense_glove_test::glove_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sense_glove_test::glove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 finger\n"
"uint8 vibration_amplitude\n"
"uint8 vibration_duration\n"
;
  }

  static const char* value(const ::sense_glove_test::glove_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sense_glove_test::glove_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finger);
      stream.next(m.vibration_amplitude);
      stream.next(m.vibration_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct glove_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sense_glove_test::glove_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sense_glove_test::glove_<ContainerAllocator>& v)
  {
    s << indent << "finger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finger);
    s << indent << "vibration_amplitude: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vibration_amplitude);
    s << indent << "vibration_duration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vibration_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSE_GLOVE_TEST_MESSAGE_GLOVE_H
